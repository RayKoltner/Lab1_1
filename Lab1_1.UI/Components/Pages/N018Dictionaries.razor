@page "/dictionaries"
@attribute [StreamRendering]

@rendermode RenderMode.InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime
@using Lab1_1.Data.Model
@using Lab1_1.Share.DTOs
@using System.IO

<script>
    function scrollToEditMenu() {
        document.getElementById('editMenu').scrollIntoView({ behavior: 'smooth' });
    }
</script>

<PageTitle>N018 Dictionaries</PageTitle>

<h1>Справочники формата N018</h1>

<p>Данные:</p>

@if (dictionaries == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Код</th>
                <th>Название</th>
                <th>Дата начала</th>
                <th>Дата окончания</th>
                <th>Комментарии</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dict in dictionaries)
            {
                <tr>
                    <td>@dict.Id</td>
                    <td>@dict.Code</td>
                    <td>@dict.Name</td>
                    <td>@dict.BeginDate.ToShortDateString()</td>
                    <td>@dict.EndDate.ToShortDateString()</td>
                    <td>@dict.Comments</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => change(dict)">Изменить</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick = "() => delete(dict.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<div class="container">
    <div class="row">
    <div id="editMenu" class="col menu">
        <p>Поле для добавления/изменения сущности</p>
        <p>
            ID (опционально, при нуле будет создана новая запись):<br />
            <input @bind-value=tempDictionary.Id />
        </p>
        <p>
            Код:<br />
            <input @bind-value=tempDictionary.Code />
        </p>
        <p>
            Название:<br />
            <input @bind-value=tempDictionary.Name />
        </p>
        <p>
            Дата начала:<br />
            <input @bind-value=tempDictionary.BeginDate />
        </p>
        <p>
            Дата окончания:<br />
            <input @bind-value=tempDictionary.EndDate />
        </p>
        <p>
            Комментарии:<br />
            <input @bind-value=tempDictionary.Comments />
        </p>
        <p>
            <button @onclick=send class="@(tempDictionary.Id == 0 ? "btn addButton" : "btn changeButton")">
                @(tempDictionary.Id == 0 ? "Добавить" : "Изменить")
            </button>
            <button class="btn btn-secondary" @onclick="clearTempDict">Очистить</button>
        </p>
    </div>

    <div class="col menu">
        <p>Загрузка файла:</p>
        <InputFile accept=".xml" OnChange="LoadFile" />
    </div>
    </div>
</div>

@code {
    List<N018Dictionary> dictionaries = [];
    DictionaryDTO tempDictionary = new DictionaryDTO();
    HttpClient httpClient = null!;

    protected override async Task OnInitializedAsync()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("http://localhost:5191/api/v1/Dictionary");

        await update();
    }

    private async void change(N018Dictionary dict)
    {
        tempDictionary.Id = dict.Id;
        tempDictionary.Code = dict.Code;
        tempDictionary.Name = dict.Name;
        tempDictionary.BeginDate = dict.BeginDate;
        tempDictionary.EndDate = dict.EndDate;
        tempDictionary.Comments = dict.Comments;
        await JSRuntime.InvokeVoidAsync("scrollToEditMenu");
    }
    private void clearTempDict()
    {
        tempDictionary = new DictionaryDTO();
    }

    private async Task delete(int id)
    {
        await httpClient.DeleteAsync($"{httpClient.BaseAddress}/{id}");
        await update();
    }

    private async Task update()
    {
        dictionaries = await httpClient.GetFromJsonAsync<List<N018Dictionary>>(httpClient.BaseAddress) ?? [];
    }

    private async Task send()
    {
        if (tempDictionary.Id == 0)
        {
            await httpClient.PostAsJsonAsync(httpClient.BaseAddress, convertToPost(tempDictionary));
        }
        else
        {
            await httpClient.PutAsJsonAsync(httpClient.BaseAddress, tempDictionary);
        }
        clearTempDict();
        await update();
    }

    private static DictionaryPostDTO convertToPost(DictionaryDTO convertable)
    {
        DictionaryPostDTO postDTO = new DictionaryPostDTO();
        postDTO.Name = convertable.Name;
        postDTO.Code = convertable.Code;
        postDTO.EndDate = convertable.EndDate;
        postDTO.BeginDate = convertable.BeginDate;
        postDTO.Comments = convertable.Comments;
        return postDTO;
    }

    async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        ms.Position = 0;
        var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(ms);
        fileContent.Headers.Add("Content-Type", "text/xml");
        content.Add(fileContent, "formFile", file.Name);

        await httpClient.PostAsync($"{httpClient.BaseAddress}/uploadFile", content);
        await update();
    }
}
